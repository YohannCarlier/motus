{# templates/game/index.html.twig #}

{% extends 'base.html.twig' %}

{% block title %}Motus - Jeu{% endblock %}

{% block body %}
<div class="game-container">
    <h1 class="game-title">Le Jeu Motus</h1>
    <p><b>Classique</b><p>
    <div class="game-header">
        <a href="{{ path('home') }}" class="btn btn-primary btn-retour">Retour</a>
        <a href="{{ path('game') }}" class="btn btn-primary btn-rejouer" style="display: none;">Rejouer</a>
    </div>
    <form method="post" action="{{ path('game_submit') }}">

        <div class="grid">
        {% for row in 1..8 %}
            <div class="row" data-attempt="{{ row }}">
                {% for col in 1..wordLength %}
                    {% set letterId = 'cell-' ~ row ~ '-' ~ col %}
                    {% set isReadOnly = row == 1 and col == 1 %}
                    <input type="text"
                        id="{{ letterId }}"
                        name="{{ letterId }}"
                        maxlength="1"
                        size="1"
                        class="cell letter-input"
                        data-row="{{ row }}"
                        data-col="{{ col }}"
                        value="{{ isReadOnly ? randomWord[:1] : '' }}"
                        {{ isReadOnly ? 'readonly' : '' }}>
                {% endfor %}
            </div>
        {% endfor %}
        </div>
    </form>
    <div id="correct-word" style="display: none;"></div>
    <p id="congratulations-message" style="display: none;">Félicitations ! Vous avez trouvé le mot mystère !</p>


 <script>
document.addEventListener('DOMContentLoaded', () => {
    const wordLength = {{ wordLength }};
    const randomWord = '{{ randomWord }}'.toLowerCase();
    let gameEnded = false;
    let currentAttempt = 1;
    let inputs = document.querySelectorAll('.letter-input');

    inputs.forEach((input) => {
        let row = parseInt(input.getAttribute('data-row'), 10);
        input.disabled = row !== 1;
    });

    document.querySelector('#cell-1-2').focus();

    function getAttemptWord(attempt) {
        return Array.from(document.querySelectorAll(`.row[data-attempt="${attempt}"] .letter-input`))
            .map(input => input.value.toLowerCase())
            .join('');
    }

    function markCorrectAndPresentLetters(attemptWord) {
        const letterCount = [...randomWord].reduce((count, letter) => {
            count[letter] = (count[letter] || 0) + 1;
            return count;
        }, {});

        attemptWord.split('').forEach((letter, i) => {
            const input = document.querySelector(`#cell-${currentAttempt}-${i + 1}`);
            if (randomWord[i] === letter) {
                input.style.backgroundColor = 'red';
                letterCount[letter]--;
            } else {
                input.style.backgroundColor = ''; 
                input.classList.remove('letter-wrong-place');
            }
        });

        attemptWord.split('').forEach((letter, i) => {
            const input = document.querySelector(`#cell-${currentAttempt}-${i + 1}`);
            if (letterCount[letter] > 0 && randomWord.includes(letter) && randomWord[i] !== letter) {
                input.style.backgroundColor = 'yellow';
                letterCount[letter]--;
            }
        });
    }

    function goToNextAttempt() {
            if (currentAttempt < 6) {
                let nextAttemptLetters = [];
                for (let col = 1; col <= wordLength; col++) {
                    let input = document.querySelector(`#cell-${currentAttempt}-${col}`);
                    nextAttemptLetters[col] = input.style.backgroundColor === 'red' ? input.value : '';
                    input.disabled = true;
                }

                currentAttempt++;
                for (let col = 1; col <= wordLength; col++) {
                    let input = document.querySelector(`#cell-${currentAttempt}-${col}`);
                    input.disabled = false;
                    input.style.backgroundColor = ''; // Reset couleur
                    input.value = nextAttemptLetters[col] || '';
                }
                updateFocus();
            } else {
                alert('Désolé, vous avez utilisé toutes vos tentatives.');
                const correctWordElement = document.getElementById('correct-word');
                correctWordElement.textContent = `Perdu ! Le mot mystère était : ${randomWord.toUpperCase()}`;
                correctWordElement.style.display = 'block';
                gameEnded = true; // Définir la variable gameEnded à true
                const btnRejouer = document.querySelector('.btn-rejouer');
                btnRejouer.style.display = 'block';
                inputs.forEach(input => {
                    input.disabled = true; // Désactiver tous les champs d'entrée
        });
            }
        }

        inputs.forEach(input => {
        let row = parseInt(input.getAttribute('data-row'), 10);
        let col = parseInt(input.getAttribute('data-col'), 10);

        input.addEventListener('input', (e) => {
            input.value = input.value.slice(-1); // Keep only the last entered character
            const nextInput = document.querySelector(`#cell-${row}-${col + 1}`);
            if (nextInput) {
                nextInput.focus();
            }
        });

        input.addEventListener('keydown', (e) => {
            if (gameEnded) {
                e.preventDefault();
                return;
            }
                let previousInput = document.querySelector(`#cell-${row}-${col - 1}`);
                let nextInput = document.querySelector(`#cell-${row}-${col + 1}`);

                // Touche Backspace
                if (e.key === 'Backspace') {
                    if (input.value.length === 0 && previousInput && col > 2) {
                        e.preventDefault();
                        previousInput.focus();
                    } else if (col > 2) {
                        setTimeout(function(){
                            if (previousInput && input.value.length === 0) {
                                previousInput.focus();
                            }
                        }, 0);
                    }
                }

                // Touche fléchée gauche
                else if (e.key === 'ArrowLeft' && previousInput && col > 2) {
                    previousInput.focus();
                }

                // Touche fléchée droite
                else if (e.key === 'ArrowRight' && nextInput) {
                    nextInput.focus();
                }

                if (e.key === 'Enter') {
                e.preventDefault();
                const attemptWord = getAttemptWord(currentAttempt);
                if (attemptWord.length < wordLength) {
                    alert('Veuillez remplir tous les champs avant de soumettre.');
                    return;
                }
                if (attemptWord !== randomWord) {
                    markCorrectAndPresentLetters(attemptWord);
                    goToNextAttempt();
                } else {
                    alert('Félicitations ! Vous avez trouvé le mot.');
                    gameEnded = true;
                    document.getElementById('congratulations-message').style.display = 'block';
                    document.querySelector('.btn-rejouer').style.display = 'block';
                    inputs.forEach(input => input.disabled = true);
                }
            }
        });
    });

    updateFocus();
});
</script>



{% endblock %}

{% block stylesheets %}
<style>

    /* Style pour les lettres mal placées */
    .letter-wrong-place {
        background-color: yellow; /* Fond jaune */
        border-radius: 50%; /* Bordure arrondie */
    }

    /* Styles généraux */
    html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    background-color: #4a86ba; /* Votre couleur de fond bleue */
}

/* Styles généraux */
.game-container {
    font-family: 'Arial', sans-serif;
    background-color: #4a86ba; /* Assurez-vous que cette couleur correspond au reste du fond */
    color: #333;
    margin: 0; /* Assurez-vous que la marge est définie à 0 */
    padding: 100px;
    text-align: center;
    min-height: 100%; /* Pour s'assurer que le conteneur s'étend à toute la hauteur */
    box-sizing: border-box; /* Pour que le padding ne dépasse pas la hauteur et la largeur définies */
}
    
    /* Style du titre */
    .game-title {
        color: #ffffff;
        font-family: sans-serif;
        font-weight: bold;
    }
    
    /* Style du header et du bouton de retour */
    .game-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    
    .btn-retour {
        align-self: flex-start;
    }

    .btn-rejouer {
        align-self: flex-start;
    }

    /* Styles existants */
    .grid {
        display: flex;
        flex-direction: column;
        margin: auto; /* Centrer la grille horizontalement */
    }

    .row {
        display: flex;
        justify-content: center;
    }

    .cell {
        width: 50px; /* Largeur de la cellule */
        height: 50px; /* Hauteur de la cellule */
        border: 2px solid #007BFF; /* Bordure de la cellule */
        margin: 1px; /* Espacement entre les cellules */
        font-size: 20px; /* Taille du texte */
        text-align: center; /* Alignement du texte */
        text-transform: uppercase; /* Lettres majuscules */
    }

    /* Assurez-vous que les champs de saisie s'intègrent bien dans les cellules */
    .cell input {
        border: none; /* Supprimer la bordure par défaut des inputs */
        width: 100%; /* Remplir la cellule */
        height: 100%; /* Remplir la cellule */
        font-size: inherit; /* Hériter de la taille de police du parent */
        text-align: center; /* Alignement du texte */
        text-transform: uppercase; /* Lettres majuscules */
    }

    /* Style pour les inputs lorsque l'utilisateur interagit avec eux */
    .cell input:focus {
        outline: none; /* Supprimer l'outline par défaut */
        box-shadow: 0 0 5px #007BFF; /* Ajouter un effet de focus */
    }
</style>
{% endblock %}