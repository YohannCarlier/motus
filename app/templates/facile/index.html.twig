{% extends 'base.html.twig' %}

{% block title %}Motus - Jeu{% endblock %}

{% block body %}
<div class="game-container">
    <h1 class="game-title">Le Jeu Motus</h1>
    <p class="mode-game">Contre la montre</p>
    <p>Mode de jeu choisi : <h3><b>FACILE</b></h3></p>
    <div class="game-header">
        <a href="{{ path('difficult') }}" class="btn btn-primary btn-retour">Changez de difficulté</a>
        <a href="{{ path('home') }}" class="btn btn-primary btn-retour">Retour au menu principal</a>
        <a href="{{ path('facile') }}" class="btn btn-primary btn-rejouer" style="display: none;">Rejouer</a>
    </div>
    <div id="timer-container">
        <p id="timer">Temps restant : <span id="countdown"></span></p>
    </div>
    <form method="post" action="{{ path('game_submit') }}">

        <div class="grid">
        {% for row in 1..8 %}
            <div class="row" data-attempt="{{ row }}">
                {% for col in 1..wordLength %}
                    {% set letterId = 'cell-' ~ row ~ '-' ~ col %}
                    {% set isReadOnly = row == 1 and col == 1 %}
                    <input type="text"
                        id="{{ letterId }}"
                        name="{{ letterId }}"
                        maxlength="1"
                        size="1"
                        class="cell letter-input"
                        data-row="{{ row }}"
                        data-col="{{ col }}"
                        value="{{ isReadOnly ? randomWord[:1] : '' }}"
                        {{ isReadOnly ? 'readonly' : '' }}>
                {% endfor %}
            </div>
        {% endfor %}
        </div>
    </form>
    <div id="correct-word" style="display: none;"></div>


 <script>
     document.addEventListener('DOMContentLoaded', () => {
        const wordLength = {{ wordLength }};
        const randomWord = '{{ randomWord }}'.toLowerCase();
        let gameEnded = false; // Nouvelle variable
        let currentAttempt = 1;
        let timeLeft = 180; // Temps initial en secondes
        let timer;
        let inputs = document.querySelectorAll('.letter-input');

        // Définir le chronomètre initial
        updateTimerDisplay();
        

        function updateTimerDisplay() {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            const formattedTime = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            document.getElementById('countdown').textContent = formattedTime;
        }

        function startTimer() {
            timer = setInterval(() => {
                timeLeft--;

                // Mise à jour de l'affichage du chronomètre
                updateTimerDisplay();

                // Vérifier si le temps est écoulé
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    endGame(false); // Appel de la fonction endGame avec le paramètre false
                }
            }, 1000);
        }

        // Commencer le chronomètre lorsque le jeu démarre
        startTimer();

        // Désactiver les champs d'entrée des lignes suivantes
        inputs.forEach((input) => {
            let row = parseInt(input.getAttribute('data-row'), 10);
            if (row > 1) {
                input.disabled = true;
            }
        });

        function isAllowedLetter(letter) {
    // Utilisez une expression régulière pour vérifier si la lettre est une lettre majuscule ou minuscule
            return /^[a-zA-Z]$/.test(letter);
        }

        function updateFocus() {
            const currentRowInputs = document.querySelectorAll(`.row[data-attempt="${currentAttempt}"] .letter-input`);
            let focusSet = false;
            for (let input of currentRowInputs) {
                if (input.style.backgroundColor === 'red') {
                    continue;
                } else if (!input.value) {
                    input.focus();
                    focusSet = true;
                    break;
                }
            }
            if (!focusSet) {
                currentRowInputs[currentRowInputs.length - 1].focus();
            }
        }

        // Mettre le focus sur la deuxième case de la première ligne
        updateFocus();

        function getAttemptWord(attempt) {
            let attemptWord = '';
            for (let col = 1; col <= wordLength; col++) {
                let input = document.querySelector(`#cell-${attempt}-${col}`);
                if (input.value.trim() === '') {
                    return '';
                }
                attemptWord += input.value.toLowerCase();
            }
            return attemptWord;
        }

        function goToNextAttempt() {
            if (currentAttempt < 8) {
                let nextAttemptLetters = [];
                for (let col = 1; col <= wordLength; col++) {
                    let input = document.querySelector(`#cell-${currentAttempt}-${col}`);
                    nextAttemptLetters[col] = input.style.backgroundColor === 'red' ? input.value : '';
                    input.disabled = true;
                }

                currentAttempt++;
                for (let col = 1; col <= wordLength; col++) {
                    let input = document.querySelector(`#cell-${currentAttempt}-${col}`);
                    input.disabled = false;
                    input.style.backgroundColor = ''; // Reset couleur
                    input.value = nextAttemptLetters[col] || '';
                }
                updateFocus();
            } else {
                endGame(false); // Appel de la fonction endGame avec le paramètre false
            }
        }

        function markCorrectAndPresentLetters(attemptWord) {
        const letterCount = [...randomWord].reduce((count, letter) => {
            count[letter] = (count[letter] || 0) + 1;
            return count;
        }, {});

        attemptWord.split('').forEach((letter, i) => {
            const input = document.querySelector(`#cell-${currentAttempt}-${i + 1}`);
            if (randomWord[i] === letter) {
                input.style.backgroundColor = 'red';
                letterCount[letter]--;
            } else {
                input.style.backgroundColor = ''; 
                input.classList.remove('letter-wrong-place', 'round-yellow');
            }
        });

        attemptWord.split('').forEach((letter, i) => {
            const input = document.querySelector(`#cell-${currentAttempt}-${i + 1}`);
            if (letterCount[letter] > 0 && randomWord.includes(letter) && randomWord[i] !== letter) {
                input.style.backgroundColor = 'yellow';
                letterCount[letter]--;
                input.classList.add('round-yellow'); // Ajouter la classe round-yellow
            }
        });
    }

        function endGame(success) {
            clearInterval(timer);
            alert(success ? 'Félicitations ! Vous avez trouvé le mot.' : `Perdu !`);
            const correctWordElement = document.getElementById('correct-word');
            correctWordElement.textContent = success
                ? `Félicitations ! Vous avez trouvé le mot.`
                : `Perdu ! Le mot mystère était : ${randomWord.toUpperCase()}`;
            correctWordElement.style.display = 'block';
            gameEnded = true; // Définir la variable gameEnded à true
            const btnRejouer = document.querySelector('.btn-rejouer');
            btnRejouer.style.display = 'block';
            
            if (success) {
                // Récupérer les éléments de la ligne correcte
                const correctRowInputs = document.querySelectorAll(`.row[data-attempt="${currentAttempt}"] .letter-input`);

                // Modifier le background color de chaque lettre de la ligne correcte
                correctRowInputs.forEach(input => {
                    input.style.backgroundColor = 'red';
                    input.disabled = true; // Désactiver tous les champs d'entrée de la ligne correcte
                });

            }



            inputs.forEach(input => {
                input.disabled = true; // Désactiver tous les champs d'entrée
            });
        }

        inputs.forEach(input => {
            let row = parseInt(input.getAttribute('data-row'), 10);
            let col = parseInt(input.getAttribute('data-col'), 10);

            input.addEventListener('input', (e) => {
                // Remplacer la lettre par la nouvelle entrée et déplacer le focus à la case suivante
                if (input.value.length > 1) {
                    input.value = input.value.slice(-1); // Gardez seulement la dernière lettre entrée
                }
                let nextInput = document.querySelector(`#cell-${row}-${col + 1}`);
                if (nextInput) {
                    nextInput.focus();
                }
                let letter = input.value.toLowerCase();
                if (input.style.backgroundColor === 'red') {
                    // Si oui, déplacer le focus sur la lettre suivante
                    let nextInput = document.querySelector(`#cell-${row}-${col + 1}`);
                    if (nextInput) {
                        nextInput.focus();
                    }
                    return; // Sortir de la fonction pour éviter le reste du traitement
                }
                if (letter !== '' && !isAllowedLetter(letter)) {
                    alert("Présence d'un ou de plusieurs caractères interdits, veuillez écrire une lettre");
                    input.value = ''; // Effacer le champ d'entrée
                    input.focus();
                    return;
                }
            });

            input.addEventListener('keydown', (e) => {
                if (gameEnded) {
                    e.preventDefault(); // Empêcher toute action lorsque le jeu est terminé
                    return;
                }
                let previousInput = document.querySelector(`#cell-${row}-${col - 1}`);
                let nextInput = document.querySelector(`#cell-${row}-${col + 1}`);

                // Touche Backspace
                if (e.key === 'Backspace') {
                    if (input.value.length === 0 && previousInput && col > 2) {
                        e.preventDefault();
                        previousInput.focus();
                    } else if (col > 2) {
                        setTimeout(function () {
                            if (previousInput && input.value.length === 0) {
                                previousInput.focus();
                            }
                        }, 0);
                    }
                }

                // Touche fléchée gauche
                else if (e.key === 'ArrowLeft' && previousInput && col > 2) {
                    previousInput.focus();
                }

                // Touche fléchée droite
                else if (e.key === 'ArrowRight' && nextInput) {
                    nextInput.focus();
                }

                if (e.key === 'Enter') {
                    e.preventDefault();
                    let attemptWord = getAttemptWord(currentAttempt);

                    if (attemptWord.length < wordLength) {
                        alert('Veuillez remplir tous les champs avant de soumettre.');
                        return;
                    }

                    if (attemptWord !== randomWord) {
                        for (let col = 1; col <= wordLength; col++) {
                            let input = document.querySelector(`#cell-${currentAttempt}-${col}`);
                            let letter = input.value.toLowerCase();
                            if (letter === randomWord[col - 1]) {
                                input.style.backgroundColor = 'red'; // Lettre correcte
                            } else if (randomWord.includes(letter)) {
                                input.classList.add('letter-wrong-place');
                            }
                        }
                        markCorrectAndPresentLetters(attemptWord);
                        goToNextAttempt();
                    } else {
                        endGame(true); // Appel de la fonction endGame avec le paramètre true
                    }
                }
            });
        });
    });
</script>

{% endblock %}

{% block stylesheets %}
<style>

    .round-yellow {
            border-radius: 50%; /* Bordure arrondie */
        }

    /* Style pour les lettres mal placées */
    .letter-wrong-place {
        background-color: yellow; /* Fond jaune */
        border-radius: 50%; /* Bordure arrondie */
    }

    /* Styles généraux */
    html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    background-color: #4a86ba; /* Votre couleur de fond bleue */
}

/* Styles généraux */
.game-container {
    font-family: 'Arial', sans-serif;
    background-color: #4a86ba; /* Assurez-vous que cette couleur correspond au reste du fond */
    color: #333;
    margin: 0; /* Assurez-vous que la marge est définie à 0 */
    padding: 100px;
    text-align: center;
    min-height: 100%; /* Pour s'assurer que le conteneur s'étend à toute la hauteur */
    box-sizing: border-box; /* Pour que le padding ne dépasse pas la hauteur et la largeur définies */
}
    
    /* Style du titre */
    .game-title {
        color: #ffffff;
        font-family: sans-serif;
        font-weight: bold;
    }
    
    /* Style du header et du bouton de retour */
    .game-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    
    .btn-retour {
        align-self: flex-start;
        background-color: #d1b31f;
    }

    .btn-rejouer {
        align-self: flex-start;
        background-color: #d1b31f;
    }

    /* Styles existants */
    .grid {
        display: flex;
        flex-direction: column;
        margin: auto; /* Centrer la grille horizontalement */
    }

    .row {
        display: flex;
        justify-content: center;
    }

    .cell {
        width: 50px; /* Largeur de la cellule */
        height: 50px; /* Hauteur de la cellule */
        border: 2px solid #007BFF; /* Bordure de la cellule */
        margin: 1px; /* Espacement entre les cellules */
        font-size: 20px; /* Taille du texte */
        text-align: center; /* Alignement du texte */
        text-transform: uppercase; /* Lettres majuscules */
    }

    .mode-game {
        font-weight: bold;
    }

    /* Assurez-vous que les champs de saisie s'intègrent bien dans les cellules */
    .cell input {
        border: none; /* Supprimer la bordure par défaut des inputs */
        width: 100%; /* Remplir la cellule */
        height: 100%; /* Remplir la cellule */
        font-size: inherit; /* Hériter de la taille de police du parent */
        text-align: center; /* Alignement du texte */
        text-transform: uppercase; /* Lettres majuscules */
    }

    /* Style pour les inputs lorsque l'utilisateur interagit avec eux */
    .cell input:focus {
        outline: none; /* Supprimer l'outline par défaut */
        box-shadow: 0 0 5px #007BFF; /* Ajouter un effet de focus */
    }

    .btn:hover {
            background-color: #d11f1f;
        }
</style>
{% endblock %}